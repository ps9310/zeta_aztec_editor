// Autogenerated from Pigeon (v24.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum AztecToolbarOption: Int {
  case bOLD = 0
  case iTALIC = 1
  case uNDERLINE = 2
  case sTRIKETHROUGH = 3
  case hEADING = 4
  case lIST = 5
  case uNORDEREDLIST = 6
  case oRDEREDLIST = 7
  case tASKLIST = 8
  case iNDENT = 9
  case oUTDENT = 10
  case aLIGNLEFT = 11
  case aLIGNCENTER = 12
  case aLIGNRIGHT = 13
  case qUOTE = 14
  case lINK = 15
  case cODE = 16
  case pREFORMAT = 17
  case hORIZONTALRULE = 18
  case iMAGE = 19
  case vIDEO = 20
}

enum AztecEditorTheme: Int {
  case light = 0
  case dark = 1
  case system = 2
}

/// Generated class from Pigeon that represents data sent in messages.
struct AztecEditorConfig {
  var primaryColor: String? = nil
  var backgroundColor: String? = nil
  var textColor: String? = nil
  var placeholder: String? = nil
  var fileExtensions: [String]? = nil
  var toolbarOptions: [AztecToolbarOption]? = nil
  var title: String
  var theme: AztecEditorTheme


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> AztecEditorConfig? {
    let primaryColor: String? = nilOrValue(pigeonVar_list[0])
    let backgroundColor: String? = nilOrValue(pigeonVar_list[1])
    let textColor: String? = nilOrValue(pigeonVar_list[2])
    let placeholder: String? = nilOrValue(pigeonVar_list[3])
    let fileExtensions: [String]? = nilOrValue(pigeonVar_list[4])
    let toolbarOptions: [AztecToolbarOption]? = nilOrValue(pigeonVar_list[5])
    let title = pigeonVar_list[6] as! String
    let theme = pigeonVar_list[7] as! AztecEditorTheme

    return AztecEditorConfig(
      primaryColor: primaryColor,
      backgroundColor: backgroundColor,
      textColor: textColor,
      placeholder: placeholder,
      fileExtensions: fileExtensions,
      toolbarOptions: toolbarOptions,
      title: title,
      theme: theme
    )
  }
  func toList() -> [Any?] {
    return [
      primaryColor,
      backgroundColor,
      textColor,
      placeholder,
      fileExtensions,
      toolbarOptions,
      title,
      theme,
    ]
  }
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return AztecToolbarOption(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return AztecEditorTheme(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      return AztecEditorConfig.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AztecToolbarOption {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? AztecEditorTheme {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? AztecEditorConfig {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol AztecEditorApi {
  func launch(initialHtml: String?, editorToken: String, config: AztecEditorConfig, completion: @escaping (Result<String?, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AztecEditorApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `AztecEditorApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: AztecEditorApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let launchChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.zeta_aztec_editor.AztecEditorApi.launch\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      launchChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let initialHtmlArg: String? = nilOrValue(args[0])
        let editorTokenArg = args[1] as! String
        let configArg = args[2] as! AztecEditorConfig
        api.launch(initialHtml: initialHtmlArg, editorToken: editorTokenArg, config: configArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      launchChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol AztecFlutterApiProtocol {
  func onFileSelected(editorToken editorTokenArg: String, filePath filePathArg: String, completion: @escaping (Result<String?, PigeonError>) -> Void)
  func onFileDeleted(editorToken editorTokenArg: String, filePath filePathArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class AztecFlutterApi: AztecFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: MessagesPigeonCodec {
    return MessagesPigeonCodec.shared
  }
  func onFileSelected(editorToken editorTokenArg: String, filePath filePathArg: String, completion: @escaping (Result<String?, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.zeta_aztec_editor.AztecFlutterApi.onFileSelected\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([editorTokenArg, filePathArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        let result: String? = nilOrValue(listResponse[0])
        completion(.success(result))
      }
    }
  }
  func onFileDeleted(editorToken editorTokenArg: String, filePath filePathArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.zeta_aztec_editor.AztecFlutterApi.onFileDeleted\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([editorTokenArg, filePathArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
